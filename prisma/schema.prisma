generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  role          String
  isPasswordChanged Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  managedTeams  Team[]   @relation("ManagerToTeam")
  leadTeams     Team[]   @relation("TeamLeaderToTeam")
  team          Team?    @relation(fields: [teamId], references: [id])
  teamId        Int?
  dailyMetrics  DailyMetrics[]
  trimestralMetrics TrimestralMetrics[] @relation("TeamLeaderTrimestralMetrics")
  semanalMetrics    SemanalMetrics[]    @relation("TeamLeaderSemanalMetrics")
  tmoMetrics        TMOMetrics[]        @relation("TeamLeaderTMOMetrics")
  cases Case[]
  notifications Notification[]
  events Event[]
}

model Team {
  id            Int      @id @default(autoincrement())
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  manager       User     @relation("ManagerToTeam", fields: [managerId], references: [id])
  managerId     Int
  teamLeader    User     @relation("TeamLeaderToTeam", fields: [teamLeaderId], references: [id])
  teamLeaderId  Int
  members       User[]
  dailyMetrics  DailyMetrics[]
  trimestralMetrics TrimestralMetrics[]
  semanalMetrics    SemanalMetrics[]
  tmoMetrics        TMOMetrics[]
  cases Case[]
}

model DailyMetrics {
  id            Int      @id @default(autoincrement())
  date          DateTime
  nsp           Int
  q             Int
  nps           Int
  csat          Float
  ces           Float
  rd            Float
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  team          Team     @relation(fields: [teamId], references: [id])
  teamId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TrimestralMetrics {
  id            Int      @id @default(autoincrement())
  name          String
  month         String
  qResp         Int
  nps           Int
  sat           Float
  rd            Float
  teamLeader    User     @relation("TeamLeaderTrimestralMetrics", fields: [teamLeaderId], references: [id])
  teamLeaderId  Int
  team          Team     @relation(fields: [teamId], references: [id])
  teamId        Int
  createdAt     DateTime @default(now())
}

model SemanalMetrics {
  id            Int      @id @default(autoincrement())
  name          String
  week          String
  q             Int
  nps           Int
  csat          Float
  teamLeader    User     @relation("TeamLeaderSemanalMetrics", fields: [teamLeaderId], references: [id])
  teamLeaderId  Int
  team          Team     @relation(fields: [teamId], references: [id])
  teamId        Int
  createdAt     DateTime @default(now())
}

model TMOMetrics {
  id            Int      @id @default(autoincrement())
  name          String
  qLlAtendidas  Int
  tiempoACD     String
  acw           String
  hold          String
  ring          String
  tmo           String
  teamLeader    User     @relation("TeamLeaderTMOMetrics", fields: [teamLeaderId], references: [id])
  teamLeaderId  Int
  team          Team     @relation(fields: [teamId], references: [id])
  teamId        Int
  createdAt     DateTime @default(now())
}

model Case {
  id                Int      @id @default(autoincrement())
  claimDate         DateTime
  startDate         DateTime
  withinSLA         Boolean
  caseNumber        String   @unique
  authorizationType String
  details           String
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  team              Team     @relation(fields: [teamId], references: [id])
  teamId            Int
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  start     DateTime
  end       DateTime
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}