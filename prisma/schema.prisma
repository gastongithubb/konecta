generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_POSTGRES_PRISMA_URL")
  directUrl = env("DATABASE_POSTGRES_URL_NON_POOLING")
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String
  email              String              @unique
  password           String
  role               String
  isPasswordChanged  Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  teamId             Int?
  cases              Case[]
  dailyMetrics       DailyMetrics[]
  events             Event[]
  news               News[]
  nomencladorChanges NomencladorChange[]
  notifications      Notification[]
  semanalMetrics     SemanalMetrics[]    @relation("TeamLeaderSemanalMetrics")
  TMOMetrics         TMOMetrics[]
  managedTeams       Team[]              @relation("ManagerToTeam")
  leadTeams          Team[]              @relation("TeamLeaderToTeam")
  trimestralMetrics  TrimestralMetrics[] @relation("TeamLeaderTrimestralMetrics")
  team               Team?               @relation(fields: [teamId], references: [id])

  CaseTracking CaseTracking[]

  TeamWeeklyTracking TeamWeeklyTracking[]

  WeekConfiguration WeekConfiguration[]
}

model Nomina {
  id                Int      @id @default(autoincrement())
  estadoActual      String
  cuenta            String
  servicio          String
  cargo             String
  provincia         String
  site              String
  lider             String
  apellidoYNombre   String
  usuarioOrion      String
  usuarioSalesforce String
  modalidad         String
  ingreso           String
  egreso            String
  box               String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  teamId            Int
  team              Team     @relation(fields: [teamId], references: [id])
}

model Team {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  managerId         Int
  teamLeaderId      Int
  grupoNovedades    String?
  grupoGeneral      String?
  cases             Case[]
  dailyMetrics      DailyMetrics[]
  Nomina            Nomina[]
  semanalMetrics    SemanalMetrics[]
  tmoMetrics        TMOMetrics[]
  manager           User                @relation("ManagerToTeam", fields: [managerId], references: [id])
  teamLeader        User                @relation("TeamLeaderToTeam", fields: [teamLeaderId], references: [id])
  trimestralMetrics TrimestralMetrics[]
  members           User[]

  CaseTracking CaseTracking[]
}

model TrimestralMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  month        String
  qResp        Int
  nps          Int
  sat          Float
  rd           Float
  teamLeaderId Int
  teamId       Int
  createdAt    DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation("TeamLeaderTrimestralMetrics", fields: [teamLeaderId], references: [id])
}

model SemanalMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  week         String
  q            Int
  nps          Int
  csat         Float
  teamLeaderId Int
  teamId       Int
  createdAt    DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation("TeamLeaderSemanalMetrics", fields: [teamLeaderId], references: [id])
}

model DailyMetrics {
  id           Int       @id @default(autoincrement())
  name         String
  q            Int
  nps          Float
  csat         Float
  ces          Float
  rd           Float
  teamId       Int?
  teamLeaderId Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  team         Team?     @relation(fields: [teamId], references: [id])
  teamLeader   User      @relation(fields: [teamLeaderId], references: [id])

  @@index([teamId])
  @@index([teamLeaderId])
}

model TMOMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  qLlAtendidas Int
  tiempoACD    String   @default("00:00:00")
  acw          String   @default("00:00:00")
  hold         String   @default("00:00:00")
  ring         String   @default("00:00:00")
  tmo          String   @default("00:00:00")
  teamId       Int?
  teamLeaderId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  team         Team?     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation(fields: [teamLeaderId], references: [id])

  @@index([teamId])
  @@index([teamLeaderId])
}

model Case {
  id                Int      @id @default(autoincrement())
  claimDate         DateTime
  startDate         DateTime
  withinSLA         Boolean
  caseNumber        String   @unique
  authorizationType String
  customType        String?
  details           String
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            Int
  teamId            Int?
  reiteratedFrom    Int?
  originalCase      Case?    @relation("Reiterations", fields: [reiteratedFrom], references: [id])
  reiterations      Case[]   @relation("Reiterations")
  team              Team?    @relation(fields: [teamId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@index([caseNumber])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  start     DateTime
  end       DateTime
  creatorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id])
}

model News {
  id        String   @id @default(cuid())
  date      DateTime
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId Int
  name      String
  url       String
  creator   User     @relation(fields: [creatorId], references: [id])
}

model Survey {
  id                Int      @id @default(autoincrement())
  moodRating        Float
  workEnvironment   Float
  personalWellbeing Float
  workLifeBalance   Float
  stressLevel       Float
  feedback          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}

model NomencladorNM {
  id             Int                       @id @default(autoincrement())
  descripcion    String
  comoPedirse    String
  codigo         String                    @unique
  observaciones  String?
  isActive       Boolean                   @default(true)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @default(now())
  changesNM      NomencladorChange[]       @relation("NomencladorChangeToNM")
  equivalentesNU NomencladorEquivalencia[] @relation("NMtoNU")
}

model NomencladorNU {
  id             Int                       @id @default(autoincrement())
  descripcion    String
  comoPedirse    String
  codigo         String
  nucodigo       String
  observaciones  String?
  isActive       Boolean                   @default(true)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @default(now())
  changesNU      NomencladorChange[]       @relation("NomencladorChangeToNU")
  equivalentesNM NomencladorEquivalencia[] @relation("NMtoNU")

  @@unique([codigo, nucodigo])
}

model NomencladorEquivalencia {
  id        Int           @id @default(autoincrement())
  nmId      Int
  nuId      Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  nm        NomencladorNM @relation("NMtoNU", fields: [nmId], references: [id])
  nu        NomencladorNU @relation("NMtoNU", fields: [nuId], references: [id])

  @@unique([nmId, nuId])
}

model NomencladorChange {
  id            Int            @id @default(autoincrement())
  nomenclador   String
  practiceId    Int
  field         String
  oldValue      String?
  newValue      String
  createdAt     DateTime       @default(now())
  modifiedBy    Int
  user          User           @relation(fields: [modifiedBy], references: [id])
  nomencladorNM NomencladorNM? @relation("NomencladorChangeToNM", fields: [practiceId], references: [id], map: "NomencladorChange_practiceId_nm_fkey")
  nomencladorNU NomencladorNU? @relation("NomencladorChangeToNU", fields: [practiceId], references: [id], map: "NomencladorChange_practiceId_nu_fkey")

  @@index([practiceId])
  @@index([createdAt])
}

model CaseTracking {
  id         Int      @id @default(autoincrement())
  caseNumber String   @unique
  action     String
  area       String?
  reason     String
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  teamId     Int
  userId     Int
  team       Team     @relation(fields: [teamId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Incident {
  id          Int      @id @default(autoincrement())
  system      String   // Orion, Xlite, Salesforce
  startTime   DateTime
  endTime     DateTime?
  ticketNumber String  @unique
  status      String   @default("active") // active, resolved
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ticketNumber])
  @@index([system])
  @@index([status])
}

model TeamWeeklyTracking {
  id        Int      @id @default(autoincrement())
  userId    Int
  weekId    Int
  callType  String?
  audio     String?
  score     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, weekId])
  @@index([userId])
  @@index([weekId])
}

model WeekConfiguration {
  id        Int      @id @default(autoincrement())
  weekNumber Int
  label     String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int
  creator   User     @relation(fields: [createdBy], references: [id])

  @@index([createdBy])
}