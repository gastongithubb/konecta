generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  password          String
  role              String
  isPasswordChanged Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  teamId            Int?
  cases             Case[]
  dailyMetrics      DailyMetrics[]
  events            Event[]
  news              News[]
  notifications     Notification[]
  semanalMetrics    SemanalMetrics[]    @relation("TeamLeaderSemanalMetrics")
  tmoMetrics        TMOMetrics[]        @relation("TeamLeaderTMOMetrics")
  managedTeams      Team[]              @relation("ManagerToTeam")
  leadTeams         Team[]              @relation("TeamLeaderToTeam")
  trimestralMetrics TrimestralMetrics[] @relation("TeamLeaderTrimestralMetrics")
  team              Team?               @relation(fields: [teamId], references: [id])
}

model Team {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  managerId         Int
  teamLeaderId      Int
  cases             Case[]
  dailyMetrics      DailyMetrics[]
  semanalMetrics    SemanalMetrics[]
  tmoMetrics        TMOMetrics[]
  manager           User                @relation("ManagerToTeam", fields: [managerId], references: [id])
  teamLeader        User                @relation("TeamLeaderToTeam", fields: [teamLeaderId], references: [id])
  trimestralMetrics TrimestralMetrics[]
  members           User[]
}

model DailyMetrics {
  id        Int      @id @default(autoincrement())
  date      DateTime
  nsp       Int
  q         Int
  nps       Int
  csat      Float
  ces       Float
  rd        Float
  userId    Int
  teamId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model TrimestralMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  month        String
  qResp        Int
  nps          Int
  sat          Float
  rd           Float
  teamLeaderId Int
  teamId       Int
  createdAt    DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation("TeamLeaderTrimestralMetrics", fields: [teamLeaderId], references: [id])
}

model SemanalMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  week         String
  q            Int
  nps          Int
  csat         Float
  teamLeaderId Int
  teamId       Int
  createdAt    DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation("TeamLeaderSemanalMetrics", fields: [teamLeaderId], references: [id])
}

model TMOMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  qLlAtendidas Int
  tiempoACD    String
  acw          String
  hold         String
  ring         String
  tmo          String
  teamLeaderId Int
  teamId       Int
  createdAt    DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation("TeamLeaderTMOMetrics", fields: [teamLeaderId], references: [id])
}

model Case {
  id                Int      @id @default(autoincrement())
  claimDate         DateTime
  startDate         DateTime
  withinSLA         Boolean
  caseNumber        String   @unique
  authorizationType String
  details           String
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            Int
  teamId            Int
  team              Team     @relation(fields: [teamId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  start     DateTime
  end       DateTime
  creatorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id])
}

model News {
  id        String   @id @default(cuid())
  date      DateTime
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId Int
  name      String
  url       String
  creator   User     @relation(fields: [creatorId], references: [id])
}

model Survey {
  id                Int      @id @default(autoincrement())
  moodRating       Float
  workEnvironment  Float
  personalWellbeing Float
  workLifeBalance  Float
  stressLevel      Float
  feedback         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}