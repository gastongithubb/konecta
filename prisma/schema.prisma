generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  password          String
  role              String
  isPasswordChanged Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  teamId            Int?
  cases             Case[]
  dailyMetrics      DailyMetrics[]
  events            Event[]
  news              News[]
  notifications     Notification[]
  semanalMetrics    SemanalMetrics[]    @relation("TeamLeaderSemanalMetrics")
  tmoMetrics        TMOMetrics[]        @relation("TeamLeaderTMOMetrics")
  managedTeams      Team[]              @relation("ManagerToTeam")
  leadTeams         Team[]              @relation("TeamLeaderToTeam")
  trimestralMetrics TrimestralMetrics[] @relation("TeamLeaderTrimestralMetrics")
  team              Team?               @relation(fields: [teamId], references: [id])
  nomencladorChanges NomencladorChange[] // Nueva relación
}

model Nomina {
  id                Int      @id @default(autoincrement())
  estadoActual      String
  cuenta            String
  servicio          String
  cargo             String
  provincia         String
  site              String
  lider             String
  apellidoYNombre   String
  usuarioOrion      String
  usuarioSalesforce String
  modalidad         String
  ingreso           String
  egreso            String
  box               String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  teamId            Int      // Nuevo campo para la relación con Team
  team              Team     @relation(fields: [teamId], references: [id]) // Relación con Team
}

model Team {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  managerId         Int
  teamLeaderId      Int
  cases             Case[]
  dailyMetrics      DailyMetrics[]
  semanalMetrics    SemanalMetrics[]
  tmoMetrics        TMOMetrics[]
  manager           User                @relation("ManagerToTeam", fields: [managerId], references: [id])
  teamLeader        User                @relation("TeamLeaderToTeam", fields: [teamLeaderId], references: [id])
  trimestralMetrics TrimestralMetrics[]
  members           User[]
  Nomina            Nomina[]            // Relación inversa con Nomina
  grupoNovedades    String?
  grupoGeneral      String? 
}

model DailyMetrics {
  id        Int      @id @default(autoincrement())
  date      DateTime
  name      String
  q         Int
  nps       Int
  csat      Float
  ces       Float
  rd        Float
  userId    Int
  teamId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model TrimestralMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  month        String
  qResp        Int
  nps          Int
  sat          Float
  rd           Float
  teamLeaderId Int
  teamId       Int
  createdAt    DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation("TeamLeaderTrimestralMetrics", fields: [teamLeaderId], references: [id])
}

model SemanalMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  week         String
  q            Int
  nps          Int
  csat         Float
  teamLeaderId Int
  teamId       Int
  createdAt    DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation("TeamLeaderSemanalMetrics", fields: [teamLeaderId], references: [id])
}

model TMOMetrics {
  id           Int      @id @default(autoincrement())
  name         String
  qLlAtendidas Int?     // Habilitar null
  tiempoACD    Int?     // Cambiar a Int?
  acw          Int?     // Cambiar a Int?
  hold         Int?     // Cambiar a Int?
  ring         Int?     // Cambiar a Int?
  tmo          Int?     // Cambiar a Int?
  teamLeaderId Int
  teamId       Int
  createdAt    DateTime @default(now())
  team         Team     @relation(fields: [teamId], references: [id])
  teamLeader   User     @relation("TeamLeaderTMOMetrics", fields: [teamLeaderId], references: [id])
}

model Case {
  id                Int      @id @default(autoincrement())
  claimDate         DateTime
  startDate         DateTime
  withinSLA         Boolean
  caseNumber        String   @unique
  authorizationType String
  customType        String?  // Campo opcional para tipos personalizados
  details           String
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            Int
  teamId            Int?
  reiteratedFrom    Int?     // Referencia al caso original
  originalCase      Case?    @relation("Reiterations", fields: [reiteratedFrom], references: [id])
  reiterations      Case[]   @relation("Reiterations")
  team              Team?    @relation(fields: [teamId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@index([caseNumber])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  start     DateTime
  end       DateTime
  creatorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id])
}

model News {
  id        String   @id @default(cuid())
  date      DateTime 
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId Int
  name      String
  url       String
  creator   User     @relation(fields: [creatorId], references: [id])
}

model Survey {
  id                Int      @id @default(autoincrement())
  moodRating       Float
  workEnvironment  Float
  personalWellbeing Float
  workLifeBalance  Float
  stressLevel      Float
  feedback         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

model NomencladorNM {
  id            Int       @id @default(autoincrement())
  descripcion   String    @db.Text
  comoPedirse   String    @db.Text
  codigo        String    @unique
  observaciones String?   @db.Text
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  changes       NomencladorChange[] @relation("NomencladorChangeToNM")
  equivalentesNU NomencladorEquivalencia[] @relation("NMtoNU")
}

model NomencladorNU {
  id            Int       @id @default(autoincrement())
  descripcion   String    @db.Text
  comoPedirse   String    @db.Text
  codigo        String
  nucodigo      String
  observaciones String?   @db.Text
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  changes       NomencladorChange[] @relation("NomencladorChangeToNU")
  equivalentesNM NomencladorEquivalencia[] @relation("NMtoNU")

  @@unique([codigo, nucodigo])
}

model NomencladorEquivalencia {
  id          Int           @id @default(autoincrement())
  nmId        Int
  nuId        Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  nm          NomencladorNM @relation("NMtoNU", fields: [nmId], references: [id])
  nu          NomencladorNU @relation("NMtoNU", fields: [nuId], references: [id])

  @@unique([nmId, nuId])
}

model NomencladorChange {
  id            Int       @id @default(autoincrement())
  nomenclador   String    // "NM" o "NU"
  practiceId    Int       // ID de la práctica modificada
  field         String    // Campo modificado
  oldValue      String?   @db.Text
  newValue      String    @db.Text
  createdAt     DateTime  @default(now())
  modifiedBy    Int       // ID del usuario que realizó el cambio
  
  // Referencias con nombres únicos para los constraints
  user          User      @relation(fields: [modifiedBy], references: [id])
  nomencladorNM NomencladorNM? @relation("NomencladorChangeToNM", fields: [practiceId], references: [id], map: "NomencladorChange_practiceId_nm_fkey")
  nomencladorNU NomencladorNU? @relation("NomencladorChangeToNU", fields: [practiceId], references: [id], map: "NomencladorChange_practiceId_nu_fkey")

  @@index([practiceId])
  @@index([createdAt])
}

model CaseTracking {
  id          Int      @id @default(autoincrement())
  caseNumber  String   @unique
  action      String   // "Derivar" or "Cerrar"
  area        String?  // Null when action is "Cerrar"
  reason      String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
